// In Controllers/DogsController.cs
using DogTracker.Web.Data;
using DogTracker.Web.Models; // Make sure this is included
using DogTracker.Web.Models.ViewModels;
using Microsoft.AspNetCore.Mvc;


namespace DogTracker.Web.Controllers;

public class DogsController : Controller
{
    private readonly DogRepository _dogRepository;
    private readonly EatingHabitRepository _eatingHabitRepository; // Add this
    private readonly ToiletHabitRepository _toiletHabitRepository; // Add this
    private readonly WeightMeasurementRepository _weightMeasurementRepository; // Add this
    private readonly ILogger<DogsController> _logger; // Optional: Add logger

    // UPDATE THE CONSTRUCTOR
    public DogsController(
        DogRepository dogRepository,
        EatingHabitRepository eatingHabitRepository,
        ToiletHabitRepository toiletHabitRepository,
        WeightMeasurementRepository weightMeasurementRepository,
        ILogger<DogsController> logger)
    {
        _dogRepository = dogRepository;
        _eatingHabitRepository = eatingHabitRepository; // Assign
        _toiletHabitRepository = toiletHabitRepository; // Assign
        _weightMeasurementRepository = weightMeasurementRepository; // Assign
        _logger = logger; // Assign optional logger
    }

    // --- Index action likely exists ---
    // GET: Dogs
    public async Task<IActionResult> Index()
    {
        _logger.LogInformation("Accessing Dogs Index page.");
        try
        {
            var dogs = await _dogRepository.GetAllAsync();
            return View(dogs); // Pass dogs to the Index view
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving dogs for Index page.");
            // Redirect to a generic error page or show a message
            // Make sure you have the ErrorViewModel and Error action/view setup
            return RedirectToAction("Error", "Home"); // Example redirection
        }
    }

    public async Task<IActionResult> Details(int? id)
    {
        _logger.LogInformation("Accessing Dogs Details page for ID: {DogId}", id);
        if (id == null || id.Value <= 0)
        {
            _logger.LogWarning("Details action called with invalid ID: {DogId}", id);
            return BadRequest(); // Or NotFound()
        }

        try
        {
            var dog = await _dogRepository.GetByIdAsync(id.Value);
            if (dog == null)
            {
                _logger.LogWarning("Dog not found for Details page with ID: {DogId}", id.Value);
                return NotFound();
            }

            // NO LONGER fetching related data here.
            // NO LONGER creating the full DogDetailsViewModel here.

            // Just pass the Dog object directly to the view.
            // The view will only use it for the Dog Information section
            // and to get the dogId for the API calls in JavaScript.
            return View(dog);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving dog for Details page with ID: {DogId}", id.Value);
            return RedirectToAction("Error", "Home");
        }
    }

    public IActionResult Create()
    {
        _logger.LogInformation("Accessing Dogs Create page (GET).");
        // Just return the empty form view
        return View();
    }

    // POST: Dogs/Create
    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
    [HttpPost]
    [ValidateAntiForgeryToken] // Important for security! Prevents CSRF attacks.
    public async Task<IActionResult> Create([Bind("Name,Breed,DateOfBirth")] Dog dog) // Use Bind attribute
    {
        _logger.LogInformation("Attempting to create dog (POST).");
        // Remove Id from model state validation if it's bound, as it's generated by DB
        ModelState.Remove(nameof(dog.Id));

        if (ModelState.IsValid) // Check validation rules from Data Annotations
        {
            try
            {
                await _dogRepository.AddAsync(dog);
                _logger.LogInformation("Successfully created dog with Name: {DogName}", dog.Name);
                return RedirectToAction(nameof(Index)); // Redirect to the list view on success
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating dog in database.");
                // Add a model error to display to the user
                ModelState.AddModelError("", "Unable to save changes. Try again, and if the problem persists see your system administrator.");
            }
        }
        else
        {
            _logger.LogWarning("Model state invalid for Create dog POST.");
        }

        // If we got this far, something failed, redisplay form with current values and errors
        return View(dog);
    }

    // GET: Dogs/Edit/5
    public async Task<IActionResult> Edit(int? id)
    {
        _logger.LogInformation("Accessing Dogs Edit page (GET) for ID: {DogId}", id);
        if (id == null || id.Value <= 0)
        {
            return BadRequest();
        }

        try
        {
            var dog = await _dogRepository.GetByIdAsync(id.Value);
            if (dog == null)
            {
                return NotFound();
            }
            return View(dog); // Pass the found dog to the Edit view
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving dog for Edit page with ID: {DogId}", id.Value);
            return RedirectToAction("Error", "Home");
        }
    }

    // POST: Dogs/Edit/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Breed,DateOfBirth")] Dog dog)
    {
        _logger.LogInformation("Attempting to update dog (POST) for ID: {DogId}", id);
        if (id != dog.Id) // Ensure the ID from the route matches the hidden field
        {
            _logger.LogWarning("ID mismatch during Edit POST. Route ID: {RouteId}, Model ID: {ModelId}", id, dog.Id);
            return BadRequest();
        }

        if (ModelState.IsValid)
        {
            try
            {
                var updated = await _dogRepository.UpdateAsync(dog);
                if (!updated)
                {
                    _logger.LogWarning("Update failed for dog ID {DogId}. Could not find dog or no changes made.", id);
                    // Could check if dog still exists to return NotFound vs just redisplaying form
                    var exists = await _dogRepository.GetByIdAsync(id) != null;
                    if (!exists) return NotFound();
                    else ModelState.AddModelError("", "Update failed. The dog may have been deleted by another user or no changes were detected.");
                }
                else
                {
                    _logger.LogInformation("Successfully updated dog with ID: {DogId}", id);
                    return RedirectToAction(nameof(Index)); // Success! Go back to list
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating dog ID {DogId}", id);
                ModelState.AddModelError("", "Unable to save changes. Try again, and if the problem persists see your system administrator.");
            }
        }
        else
        {
            _logger.LogWarning("Model state invalid for Edit dog POST for ID: {DogId}", id);
        }

        // If we got here, redisplay form with errors
        return View(dog);
    }

    // GET: Dogs/Delete/5
    public async Task<IActionResult> Delete(int? id)
    {
        _logger.LogInformation("Accessing Dogs Delete confirmation page (GET) for ID: {DogId}", id);
        if (id == null || id.Value <= 0)
        {
            return BadRequest();
        }

        try
        {
            var dog = await _dogRepository.GetByIdAsync(id.Value);
            if (dog == null)
            {
                return NotFound();
            }
            return View(dog); // Pass the dog to the confirmation view
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error retrieving dog for Delete page with ID: {DogId}", id.Value);
            return RedirectToAction("Error", "Home");
        }
    }

    // POST: Dogs/Delete/5
    [HttpPost, ActionName("Delete")] // Use ActionName to avoid signature clash with GET Delete
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        _logger.LogInformation("Attempting to delete dog (POST) for ID: {DogId}", id);
        if (id <= 0)
        {
            return BadRequest();
        }
        try
        {
            var deleted = await _dogRepository.DeleteAsync(id);
            if (!deleted)
            {
                _logger.LogWarning("Delete failed for dog ID {DogId}. Dog not found.", id);
                // Optionally display an error message or just redirect
                TempData["ErrorMessage"] = "Could not delete dog. It may have already been deleted.";
                return RedirectToAction(nameof(Index));
            }
            _logger.LogInformation("Successfully deleted dog with ID: {DogId}", id);
            TempData["SuccessMessage"] = "Dog successfully deleted."; // Optional success message
            return RedirectToAction(nameof(Index));
        }
        catch (Exception ex) // Could be foreign key issues if cascade delete isn't on
        {
            _logger.LogError(ex, "Error deleting dog ID {DogId}", id);
            // Show error on the Delete page or redirect with general error
            TempData["ErrorMessage"] = "Error deleting dog. There might be related records (habits, measurements).";
            // You might want to redirect back to the delete confirmation page
            // return RedirectToAction(nameof(Delete), new { id = id });
            return RedirectToAction(nameof(Index)); // Or redirect to Index
        }
    }

}